library(incidence2)
# build the incidence2 object
i_covid <- covid_eng %>%
incidence2::incidence(date,
interval = "week",
count = n,
groups = region)
# summary
i_covid %>%
summary()
# plot with regions as colors
i_covid %>%
plot(fill = region, col_pal = muted, angle = 45, legend = "bottom") +
labs(title = "Weekly incidence of COVID-19 hospital admissions in England")
i_covid %>%
facet_plot(angle = 45,
format = "%d %b %y",
n_breaks = 6)
last_date <- covid_eng %>%
pull(date) %>%
max()
last_date
i_recent <- covid_eng %>%
incidence2::incidence(date,
count = n,
groups = region) %>%
filter(date > (last_date - 28), # keep last 4 weeks of data
date <= (last_date - 7)) # remove last week of data
i_recent %>%
summary()
i_recent %>%
facet_plot()
library(i2extras)
last_trends <- i_recent %>%
fit_curve(model = "poisson")
# version with negbin model needs more iterations to converge
# fit_curve(model = "negbin", control = glm.control(maxit = 1e3))
last_trends
plot(last_trends)
last_trends %>%
growth_rate()
last_trends %>%
growth_rate() %>%
ggplot(aes(y = region, x = r)) +
geom_point() +
geom_errorbar(aes(xmin = r_lower, xmax = r_upper)) +
geom_vline(xintercept = 0, linetype = 2) +
theme_bw() +
labs(title = "Estimates of daily growth rates of COVID-19 in England",
subtitle = sprintf(
"based on hospital admissions, %s - %s",
format(min(get_dates(i_recent)), "%d %B %Y"),
format(max(get_dates(i_recent)), "%d %B %Y")),
y = "",
x = "Daily growth rate")
last_trends %>%
growth_rate %>%
ggplot(aes(y = region, x = time)) +
geom_point() +
geom_errorbar(aes(xmin = time_lower, xmax = time_upper)) +
theme_bw() +
labs(title = "Estimates of doubling times of COVID-19 in England",
subtitle = sprintf(
"based on hospital admissions, %s - %s",
format(min(get_dates(i_recent)), "%d %B %Y"),
format(max(get_dates(i_recent)), "%d %B %Y")),
y = "",
x = "Doubling time (days)")
?get_R
i_covid %>%
facet_plot(angle = 45,
format = "%d %b %y",
n_breaks = 6)
f <- i %>%
fit()
f
plot(i, show_cases = TRUE, fit = f) +
theme_bw() +
large_txt +
rotate_x_txt +
labs(title = "Epidemic curve and log-linear fit")
i
warnings(Full=TRUE)
plot(i, show_cases = TRUE, fit = f) +
theme_bw() +
large_txt +
rotate_x_txt +
labs(title = "Epidemic curve and log-linear fit")
i
?plot_basic
??plot_basic
raw_dat <-read_csv("https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv")
??read_csv
library(dplyr)
raw_dat <-read_csv("https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv")
library(tidyverse)
raw_dat <-read_csv("https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv")
raw_dat
raw_dat['Area name']
raw_dat['Area name'] == London
raw_dat %>% filter('Area name' = 'London')
raw_dat %>% filter(Area name = 'London')
raw_dat %>% filter(Area name == 'London')
raw_dat %>% filter(.["Area name"] == 'London')
raw_dat %>% filter(.["Area name"] == 'Wesminster')
raw_dat %>% filter(.["Area name"] == 'Westminster')
raw_dat %>% filter(.["Area name"] == 'Waltham Forest')
install.packages('Outbreaks')
install.packages('outbreaks')
outbreaks::dengue_fais_2011()
outbreaks::dengue_fais_2011
outbreaks::covid19_england_nhscalls_2020
outbreaks::dengue_yap_2011
outbreaks::ebola_kikwit_1995
outbreaks::ebola_sierraleone_2014
outbreaks::ebola_sim
?outbreaks
??outbreaks
??vis_epicontacts
?epicontacts::make_epicontacts
?epicontacts::vis_epicontacts
??visNetwork
=
outbreaks::ebola_sim
contact_data = outbreaks::ebola_sim
contact_data = outbreaks::ebola_sim_clean
contacts = epicontacts::make_epicontacts(contacts = contact_data, from = 'infector', to='case_id')
contacts = epicontacts::make_epicontacts(contacts = contact_data, linelist = contact_data, from = 'infector', to='case_id')
epicontacts::make_epicontacts
?epicontacts::make_epicontacts
contacts = epicontacts::make_epicontacts(contacts = contact_data, linelist = contact_data, from = 'infector', id ='case_id', to='case_id')
contacts = epicontacts::make_epicontacts(contacts = contact_data, linelist = contact_data %>% select('case_id'), from = 'infector', id ='case_id', to='case_id')
contact_data
contacts = epicontacts::make_epicontacts(contacts = contact_data$contacts, linelist = contact_data$linelist %>% select('case_id'), from = 'infector', id ='case_id', to='case_id')
contacts
contacts
epicontacts::vis_epicontacts(contacts)
?epicontacts::vis_epicontacts
codeawesome
replace('123 45', ' ', '')
str_replace('123 45', ' ', '')
sringr::str_replace('123 45', ' ', '')
??str_replace
stringr::str_replace('123 45', ' ', '')
onetofive = "123 45"
onetofive
stringr::str_replace(onetofive, ' ', '')
raw_dat <-read_csv("https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv"))
library(tidyverse)
raw_dat <-read_csv("https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv"))
raw_dat <-read_csv("https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv")
raw_dat
raw_dat$columns
colnames(raw_dat)
sapply(colnames(raw_dat), FUNN= funtion(X){stringr.str_replace(X, ' ', '')})
sapply(colnames(raw_dat), FUN= funtion(X){stringr.str_replace(X, ' ', '')})
sapply(colnames(raw_dat), FUN= funtion(X)stringr.str_replace(X, ' ', ''))
sapply(colnames(raw_dat), FUN = function(X)  {stringr.str_replace(X, ' ', '')})
sapply(colnames(raw_dat), FUN = function(X)  {stringr::str_replace(X, ' ', '')})
sapply(colnames(raw_dat), FUN = function(X)  {gsub(X, ' ', '')})
sapply(colnames(raw_dat), FUN = function(X)  {gsub(' ', '', X)})
colnames(raw_dat) = sapply(colnames(raw_dat), FUN = function(X)  {gsub(' ', '', X)})
raw_dat
raw_dat <-read_csv("https://coronavirus.data.gov.uk/downloads/csv/coronavirus-cases_latest.csv")
old_colnames = colnames(raw_dat)
patern = ' '
replacement = '_'
replace_fun = function(X) {gsub(patern, replacement, X)}
new_colnames = sapply(old_colnames, FUN = replace_fun)
colnames(raw_dat) = new_colnames
colnames(raw_dat)
today()
??today()
lubridate::today(format="%M/%Y")
lubridate::today()
lubridate::today('my')
lubridate::today('MY')
lubridate::today('dmy')
lubridate:ymd()
lubridate::ymd()
lubridate::today(truncated=1)
lubridate::today()
lubridate::month(Now)
Now = lubridate::today()
lubridate::month(Now)
current_sy = lubridate::year(Now) - 1.
colnames(raw_dat) = new_colnames
Now = lubridate::today()
if (lubridate::month(Now) > 8) {
current_sy = lubridate::year(Now)
}
else{
current_sy = lubridate::year(Now) - 1.
}
if (lubridate::month(Now) > 8) {
current_sy = lubridate::year(Now)
} else{
current_sy = lubridate::year(Now) - 1.
}
if (lubridate::month(Now) > 8) {
current_sy = lubridate::year(Now)
} else{
current_sy = lubridate::year(Now) - 1.
}
current_sy
find_sy = function(date){
if (lubridate::month(date) > 8) {
sy = lubridate::year(date)
} else{
sy = lubridate::year(date) - 1.
}
sy
}
find_sy
find_sy(Now)
DOBS = sample(seq(as.Date('2003/01/01'), as.Date('2012/01/01'), by="day"), 12)
DOBS
DOBS = sample(seq(lubridate::ymd('2003/01/01'), lubridate::ymd('2012/01/01'), by="day"), 12)
DOBS
dob_sys = sapply(DOBS, find_sy)
dob_sys
years_between = current_sy - dob_sys
years_between
school_years = years_between - 5
Now = lubridate::today()
DOBS = sample(seq(lubridate::ymd('2003/01/01'), lubridate::ymd('2012/01/01'), by="day"), 12)
find_sy = function(date){
find_ind_sys = function(Now, DOBS){
current_sy = find_sy(Now)
dob_sys = sapply(DOBS, find_sy)
years_between = current_sy - dob_sys
school_years = years_between - 5
school_years
}
find_ind_sys(Now, DOBS)
}
find_sy = function(date){
if (lubridate::month(date) > 8) {
sy = lubridate::year(date)
} else{
sy = lubridate::year(date) - 1.
}
sy
}
current_sy = find_sy(Now)
find_ind_sys(Now, DOBS)
find_ind_sys = function(Now, DOBS){
current_sy = find_sy(Now)
dob_sys = sapply(DOBS, find_sy)
years_between = current_sy - dob_sys
school_years = years_between - 5
school_years
}
find_ind_sys(Now, DOBS)
?earlyR::get_R()
raw_dat %>% filter(Area_name == 'Waltham Forest')
waltham_forest = raw_dat %>% filter(Area_name == 'Waltham Forest')
waltham_forest
as.vector(waltham_forest$Daily_lab-confirmed_cases)
column_name(waltham_forest)
colnames(waltham_forest)
waltham_forest %>% plot(Specimen_date, `Daily_lab-confirmed_cases'')
)
''
'
if (lubridate::month(date) > 8) {
sy = lubridate::year(date)
} else{
sy = lubridate::year(date) - 1.
}
sy
find_sy = function(date){
if (lubridate::month(date) > 8) {
sy = lubridate::year(date)
} else{
sy = lubridate::year(date) - 1.
}
sy
}
current_sy = find_sy(Now)
}
P{}
waltham_forest %>% plot(Specimen_date, `Daily_lab-confirmed_cases')
old_colnames = colnames(raw_dat)
patern = '-'
replacement = '_'
replace_fun = function(X) {gsub(patern, replacement, X)}
new_colnames = sapply(old_colnames, FUN = replace_fun)
colnames(raw_dat) = new_colnames
waltham_forest = raw_dat %>% filter(Area_name == 'Waltham Forest')
waltham_forest %>% plot(Specimen_date, `Daily_lab-confirmed_cases')
)
''
waltham_forest %>% plot(Specimen_date, Daily_lab_confirmed_cases)
waltham_forest %>% drop_na() %>% plot(Specimen_date, Daily_lab_confirmed_cases)
waltham_forest %>% select(c(Specimen_date, Daily_lab_confirmed_cases))
waltham_forest_cases = waltham_forest %>% select(c(Specimen_date, Daily_lab_confirmed_cases))
waltham_forest %>%  plot(Specimen_date, Daily_lab_confirmed_cases)
waltham_forest_cases %>%  plot(Specimen_date, Daily_lab_confirmed_cases)
waltham_forest_cases
waltham_forest_cases %>%  plot(Specimen_date, Daily_lab_confirmed_cases)
plot(waltham_forest_cases$Specimen_date, waltham_forest_cases$Daily_lab_confirmed_cases)
raw_dat
waltham_forest
waltham_forest = raw_dat %>% filter(Area_name == 'London')
waltham_forest
regional = raw_dat %>% filter(Area_name == 'Area_type')
regional = raw_dat %>% filter(Area_type == 'Region')
library(ggplot2)
ggplot(regional, aes(x=Specimen_date, y=Daily_lab_confirmed_cases)) + facet_wrap(Area_type)
ggplot(regional, aes(x=Specimen_date, y=Daily_lab_confirmed_cases)) + facet_wrap("Area_type")
ggplot(regional, aes(x=Specimen_date, y=Daily_lab_confirmed_cases)) + facet_wrap("Area_name")
ggplot(regional, aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_wrap("Area_name")
ggplot(regional, aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_grid("Area_name")
ggplot(regional, aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_wrap(facets = "Area_name")
regional
regional = raw_dat %>% filter(Area_type == 'region')
regional
ggplot(regional, aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_wrap(facets = "Area_name")
ggplot(regional, aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + points() + facet_wrap(facets = "Area_name")
ggplot(regional, aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + line() + facet_wrap(facets = "Area_name")
ggplot(regional, aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + ggplot2::geom_bar() + facet_wrap(facets = "Area_name")
ggplot(regional ) + geom_bar(aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_wrap(facets = "Area_name")
ggplot(regional ) + geom_point(aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_wrap(facets = "Area_name")
ggplot( ) + geom_point(data = regional, aes=aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_wrap(facets = "Area_name")
ggplot( ) + /geom_point(aes(x="Specimen_date", y="Daily_lab_confirmed_cases")) + facet_wrap(facets = "Area_name")
?geom_point
?aes()
ggplot( ) + geom_point(aes(x="Specimen_date", y="Daily_lab_confirmed_cases", data=regional)) + facet_wrap(facets = "Area_name")
ggplot( ) + geom_point(aes(x="Specimen_date", y="Daily_lab_confirmed_cases"), data=regional) + facet_wrap(facets = "Area_name")
ggplot(regional,  aes(x=Specimen_date, y=Daily_lab_confirmed_cases)) + geom_point()
ggplot(regional,  aes(x=Specimen_date, y=Daily_lab_confirmed_cases)) + geom_point() + facet_wrap(Area_type)
ggplot(regional,  aes(x=Specimen_date, y=Daily_lab_confirmed_cases)) + geom_point() + facet_wrap(Area_name)
ggplot(regional,  aes(x=Specimen_date, y=Daily_lab_confirmed_cases)) + geom_point() + facet_wrap('Area_name')
??clean_data
?dbinom
dbinom(5, 6/100, 5)
dbinom(5, 6.0/100, 5)
6/100
dbinom(5, 5, 6.0/100)
dbinom(1, 5, 6.0/100)
dbinom(5, 5, 6.0/100)
optim(par = c(x=1), fn = function(x){dbinom(x, 5, 6.0/100)})
optim(par = c(x=1), fn = function(x){dbinom(x, 5, 0.06)})
sapply(0:5,functifunction(x){dbinom(x, 5, 0.06)})
sapply(0:5,function(x){dbinom(x, 5, 0.06)})
2 * (log(0.73) - log(0.0000007776))
2 * (log(0.73) - log(0.2342246880))
sapply(0:5,function(x){dbinom(x, 5, 0.6)})
incindence_data +data.table(
)
incindence_data =
data.table(
cases_s =           c(4,5,6,5,4,3,4,5),
proportion_sgtf =   c(0.1, 0.2, 0.6, 0.5, 0.5, 0.2, 0.3, 0.2),
cases_t =           c(4, 12, 12, 12, 12, 12, 12, 12)
)
incindence_data =
data.table::data.table(
cases_s =           c(4,5,6,5,4,3,4,5),
proportion_sgtf =   c(0.1, 0.2, 0.6, 0.5, 0.5, 0.2, 0.3, 0.2),
cases_t =           c(4, 12, 12, 12, 12, 12, 12, 12)
)
incindence_data
max(sapply(X=0:cases_t, fnfunction(X){dbiom(cases_s,prob,cases_t}))
}
saturated_binom_liklihood(prob, cases_t){
saturated_binom_liklihood(prob, cases_t){
max(sapply(X=0:cases_t, fn=function(X){dbiom(cases_s,prob,cases_t)}))
}
saturated_binom_liklihood(prob, cases_t){
max(sapply(X=0:cases_t, fn=function(X){dbiom(X,cases_s,prob,cases_t)}))
}
saturated_binom_liklihood(prob, cases_t){
max(sapply(X=0:cases_t, fn=function(X){dbiom(X,prob,cases_t)}))
}
saturated_binom_liklihood(prob, cases_t){
max(sapply(X=0:cases_t, FUN=function(X){dbiom(X,prob,cases_t)}))
}
saturated_binom_liklihood(prob, cases_t){
max(sapply(X=0:cases_t, FUN=function(X){dbiom(X,prob,cases_t)}))
}
saturated_binom_liklihood = function(prob, cases_t){
max(sapply(X=0:cases_t, FUN=function(X){dbiom(X,prob,cases_t)}))
}
saturated_binom_liklihood(0.5, 12)
saturated_binom_liklihood = function(prob, cases_t){
max(sapply(X=0:cases_t, FUN=function(X){dbinom(X,prob,cases_t)}))
}
saturated_binom_liklihood(0.5, 12)
dbinom(0,prob,cases_t)
dbinom(0,0.5,12)
dbinom(1,0.5,12)
dbinom(1,12,0.5)
saturated_binom_liklihood = function(prob, cases_t){
max(sapply(X=0:cases_t, FUN=function(X){dbinom(X,cases_t,prob)}))
}
incindence_data[, sat_lik := saturated_binom_liklihood(proportion_sgtf, cases_t)]
sat_lik = mapply(saturated_binom_liklihood, prob=incindence_data$proportion_sgtf, cases_t= incindence_data$cases_t]
sat_lik = mapply(saturated_binom_liklihood, prob=incindence_data$proportion_sgtf, cases_t= incindence_data$cases_t)
sat_lik
i
null_lik = mapply(dbinom, x=incindence_data$cases_s, size=iincindence_data$cases_t, prob=incindence_data$proportion_sgtf)
null_lik = mapply(dbinom, x=incindence_data$cases_s, size=incindence_data$cases_t, prob=incindence_data$proportion_sgtf)
null_lik
2 * (log(sat_lik) - log(null_lik))
dnorm(5, 6/2)
dnorm(7, 5, 6/2)
cnorm(7, 5, 6/2)
ccnorm(7, 5, 6/2)
pnorm(1, 5, 6/2)
pnorm(7, 5, 6/2)
1 - pnorm(7, 5, 6/2)
dbinom(5, 5, 0.5)
readRDS('Documents/WORK/Analyses/covid19.sgene.utla.rt/data/sgene_by_utla.rds')
sgene_ltla = readRDS('Documents/WORK/Analyses/covid19.sgene.utla.rt/data/sgene_by_utla.rds')
sgene_ltla
max(sgene_ltla$week_infection)
sgene_ltla = readRDS('Downloads/sgene_by_utla (2).rds')
sgene_ltla
max(sgene_ltla$week_infection)
covidregionaldata::get_regional_data('united kingdom')
covidregionaldata::get_regional_data('United Kingdom')
covidregionaldata::get_regional_data('UK')
covidregionaldata::get_regional_data('UK',include_level_2_regions = TRUE)
cvdata = covidregionaldata::get_regional_data('UK',include_level_2_regions = TRUE)
cvdata
cvdata[authority == 'Warrington']
data.table(cvdata)[authority == 'Warrington']
data.table::data.table(cvdata)[authority == 'Warrington']
data.table(cvdata)[,c('date', 'authority', 'cases_new')]
data.table::data.table(cvdata)[,c('date', 'authority', 'cases_new')]
cases_slim = data.table::data.table(cvdata)[,c('date', 'authority', 'cases_new')]
colnames(cases_slim) = c('date', 'ltla', 'cases_total')
merge(sgene_ltla, cases_slim, by=c('date', 'ltla'))
merge(sgene_ltla, cases_slim, by=c('date', 'ltla'))
cases_slim
sgene_ltla
colnames(cases_slim) = c('date', 'ltla', 'cases_total');
cases_slim
cases_slim[ltla=='York']
ggplot(cases_slim[ltla=='York']) + geom_line(aes(x=date, y=cases_total))
ggplot2::ggplot(cases_slim[ltla=='York']) + geom_line(aes(x=date, y=cases_total))
ggplot2::ggplot(cases_slim[ltla=='York']) + ggplot2::geom_line(aes(x=date, y=cases_total))
ggplot2::ggplot(cases_slim[ltla=='York']) + ggplot2::geom_line(ggplot2::aes(x=date, y=cases_total))
write.csv(sgene_ltla, '~/Desktop/sgene_ltla.csv')
write.csv(cases_slim, '~/Desktop/cases_ltla.csv')
sgene_ltla = readRDS('Downloads/sgene_by_utla (2).rds')
sgene_ltla
cases_slim
cases_slim$cases_total
sort(unique(cases_slim$cases_total))
plot(sort(unique(cases_slim$cases_total)))
sgene_ltla_old = readRDS('Downloads/sgene_by_utla (3).rds')
sgene_ltla_old
sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection),]
sgene_ltla_old = data.table::data.table(sgene_ltla_old)
sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection),]
rbind(sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection),], sgene_ltla)
sgene_ltla
rbind(sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection), colnames(sgene_ltla)], sgene_ltla)
sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection), colnames(sgene_ltla)]
sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection), c("week_infection", "nhser_name" ,    "utla_name",      "prop_sgtf"  ,    "samples" )]
rbind(sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection), c("week_infection", "nhser_name" ,    "utla_name",      "prop_sgtf"  ,    "samples" )], sgene_ltla)
sgene_ltla_all = rbind(sgene_ltla_old[!(week_infection %in% sgene_ltla$week_infection), c("week_infection", "nhser_name" ,    "utla_name",      "prop_sgtf"  ,    "samples" )], sgene_ltla)
sgene_ltla_all
write.csv(sgene_ltla_all, 'sgene_ltla_all.csv')
getwd()
cases_slim
cases_slim[ltla==Derby]
cases_slim[ltla=='Derby']
ggplot(cases_slim[ltla=='Derby']) + geom_line(aes(x=date, y=cases_total))
ggplot2::ggplot(cases_slim[ltla=='Derby']) + ggplot2::geom_line(ggplot2::aes(x=date, y=cases_total))
EpiCastR::fit_model
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
install_cmdstan(cores = 2, overwrite = TRUE)
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
install_cmdstan(cores = 2, overwrite = TRUE)
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
install_cmdstan(cores = 2, overwrite = TRUE)
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
install_cmdstan(cores = 2, overwrite = TRUE)
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
install_cmdstan(cores = 2, overwrite = TRUE)
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
install_cmdstan(cores = 2, overwrite = TRUE)
library(rstan)
system("xcode-select -p")
New
2:17
system("find /Library/Developer/CommandLineTools/ -name stdio.h")
setwd('Documents/WORK/Analyses/CISA/CovidAgeGroupForecast/inc2prev/')
setwd('Documents/WORK/Analyses/CISA/CovidAgeGroupForecast/')
setwd('~/Documents/WORK/Analyses/CISA/CovidAgeGroupForecast/')
